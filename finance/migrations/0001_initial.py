# Generated by Django 2.2.7 on 2019-11-23 18:23

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='InvestmentUser',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('daily_commission_percentage', models.FloatField(default=0)),
                ('daily_commission_const', models.FloatField(default=0)),
                ('ending_date_for_commission_contract', models.DateField()),
            ],
            options={
                'abstract': False,
                'verbose_name_plural': 'users',
                'verbose_name': 'user',
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='OptimalPortfolio',
            fields=[
                ('portfolio_name', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('pre_bonds_gov_usa', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='Should be between 0 to 1)'), django.core.validators.MaxValueValidator(1, message='Should be between 0 to 1')])),
                ('pre_bonds_gov_global', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='Should be between 0 to 1)'), django.core.validators.MaxValueValidator(1, message='Should be between 0 to 1')])),
                ('pre_cash', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='Should be between 0 to 1)'), django.core.validators.MaxValueValidator(1, message='Should be between 0 to 1')])),
                ('pre_bonds_industrial_usa', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='Should be between 0 to 1)'), django.core.validators.MaxValueValidator(1, message='Should be between 0 to 1')])),
                ('pre_bonds_industrial_global', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='Should be between 0 to 1)'), django.core.validators.MaxValueValidator(1, message='Should be between 0 to 1')])),
                ('pre_usa_stocks', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='Should be between 0 to 1)'), django.core.validators.MaxValueValidator(1, message='Should be between 0 to 1')])),
                ('pre_global_stocks', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='Should be between 0 to 1)'), django.core.validators.MaxValueValidator(1, message='Should be between 0 to 1')])),
                ('pre_israel_stocks', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='Should be between 0 to 1)'), django.core.validators.MaxValueValidator(1, message='Should be between 0 to 1')])),
                ('pre_gold', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='Should be between 0 to 1)'), django.core.validators.MaxValueValidator(1, message='Should be between 0 to 1')])),
                ('pre_goods', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='Should be between 0 to 1)'), django.core.validators.MaxValueValidator(1, message='Should be between 0 to 1')])),
                ('pre_individual_bonds', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='Should be between 0 to 1)'), django.core.validators.MaxValueValidator(1, message='Should be between 0 to 1')])),
                ('pre_emerging_markets_stocks', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='Should be between 0 to 1)'), django.core.validators.MaxValueValidator(1, message='Should be between 0 to 1')])),
                ('pre_real_estate', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='Should be between 0 to 1)'), django.core.validators.MaxValueValidator(1, message='Should be between 0 to 1')])),
                ('pre_individual_stocks', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='Should be between 0 to 1)'), django.core.validators.MaxValueValidator(1, message='Should be between 0 to 1')])),
                ('pre_bonds_gov_emerging_markets', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='Should be between 0 to 1)'), django.core.validators.MaxValueValidator(1, message='Should be between 0 to 1')])),
                ('pre_bonds_industrial_emerging_markets', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='Should be between 0 to 1)'), django.core.validators.MaxValueValidator(1, message='Should be between 0 to 1')])),
            ],
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('symbol', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('stack_name', models.CharField(max_length=70)),
                ('type', models.CharField(max_length=70)),
                ('risk_factor', models.CharField(max_length=70)),
            ],
        ),
        migrations.CreateModel(
            name='QuarterlyCommission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commission_date', models.DateField()),
                ('commission_paid', models.FloatField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='finance.InvestmentUser')),
            ],
        ),
        migrations.CreateModel(
            name='PortfolioManagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_bought', models.IntegerField()),
                ('is_active', models.BooleanField(default=0)),
                ('purchase_date', models.DateField()),
                ('purchase_commission', models.FloatField(default=0)),
                ('purchase_price', models.FloatField()),
                ('sell_commission', models.FloatField(default=0)),
                ('sale_date', models.DateField()),
                ('symbol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='finance.Stock')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='finance.InvestmentUser')),
            ],
        ),
        migrations.AddField(
            model_name='investmentuser',
            name='optimal_portfolio',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='finance.OptimalPortfolio'),
        ),
        migrations.CreateModel(
            name='HistoricalRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('open_price', models.FloatField()),
                ('high_price', models.FloatField()),
                ('low_price', models.FloatField()),
                ('close_price', models.FloatField()),
                ('adj_close_price', models.FloatField()),
                ('dividend_paid', models.FloatField()),
                ('symbol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='finance.Stock')),
            ],
        ),
        migrations.CreateModel(
            name='CurrentRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_price', models.FloatField()),
                ('day_change', models.FloatField()),
                ('day_change_percentage', models.FloatField()),
                ('symbol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='finance.Stock')),
            ],
        ),
    ]
